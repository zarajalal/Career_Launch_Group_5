/// <reference types="react" />
import type * as ReactNative from 'react-native';
import type { OnPageScrollStateChangedEventData as PageScrollStateChangedNativeEventData } from './specs/PagerViewNativeComponent';
type PageScrollStateChangedNativeEvent = ReactNative.NativeSyntheticEvent<PageScrollStateChangedNativeEventData>;
import { PagerView } from './PagerView';
import { Animated } from 'react-native';
export type UsePagerViewProps = ReturnType<typeof usePagerView>;
type UsePagerViewParams = {
    pagesAmount: number;
};
export declare function usePagerView({ pagesAmount }?: UsePagerViewParams): {
    ref: import("react").RefObject<PagerView>;
    activePage: number;
    isAnimated: boolean;
    pages: number[];
    scrollState: string;
    scrollEnabled: boolean;
    progress: {
        position: number;
        offset: number;
    };
    overdragEnabled: boolean;
    setPage: (page: number) => void;
    addPage: () => void;
    removePage: () => void;
    toggleScroll: () => void;
    toggleAnimation: () => void;
    setProgress: import("react").Dispatch<import("react").SetStateAction<{
        position: number;
        offset: number;
    }>>;
    onPageScroll: (...args: any[]) => void;
    onPageSelected: (...args: any[]) => void;
    onPageScrollStateChanged: (e: PageScrollStateChangedNativeEvent) => void;
    toggleOverdrag: () => void;
    AnimatedPagerView: Animated.AnimatedComponent<import("react").ForwardRefExoticComponent<Omit<import("./specs/PagerViewNativeComponent").NativeProps, "useLegacy"> & {
        useNext?: boolean | undefined;
    } & import("react").RefAttributes<{
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        setPage: (selectedPage: number) => void;
        setPageWithoutAnimation: (selectedPage: number) => void;
        pagerView: (import("react").Component<import("./specs/PagerViewNativeComponent").NativeProps, {}, any> & Readonly<ReactNative.NativeMethods>) | null;
        setScrollEnabled: (scrollEnabled: boolean) => void;
        render: () => import("react").JSX.Element;
        context: unknown;
        setState: <K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined) => void;
        forceUpdate: (callback?: (() => void) | undefined) => void;
        readonly props: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>;
        state: Readonly<{}>;
        componentDidMount?: (() => void) | undefined;
        shouldComponentUpdate?: ((nextProps: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>, nextState: Readonly<{}>, nextContext: any) => boolean) | undefined;
        componentWillUnmount?: (() => void) | undefined;
        componentDidCatch?: ((error: Error, errorInfo: import("react").ErrorInfo) => void) | undefined;
        getSnapshotBeforeUpdate?: ((prevProps: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>, prevState: Readonly<{}>) => any) | undefined;
        componentDidUpdate?: ((prevProps: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>, prevState: Readonly<{}>, snapshot?: any) => void) | undefined;
        componentWillMount?: (() => void) | undefined;
        UNSAFE_componentWillMount?: (() => void) | undefined;
        componentWillReceiveProps?: ((nextProps: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>, nextContext: any) => void) | undefined;
        UNSAFE_componentWillReceiveProps?: ((nextProps: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>, nextContext: any) => void) | undefined;
        componentWillUpdate?: ((nextProps: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>, nextState: Readonly<{}>, nextContext: any) => void) | undefined;
        UNSAFE_componentWillUpdate?: ((nextProps: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>, nextState: Readonly<{}>, nextContext: any) => void) | undefined;
    }>>>;
    PagerView: import("react").ForwardRefExoticComponent<Omit<import("./specs/PagerViewNativeComponent").NativeProps, "useLegacy"> & {
        useNext?: boolean | undefined;
    } & import("react").RefAttributes<{
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        setPage: (selectedPage: number) => void;
        setPageWithoutAnimation: (selectedPage: number) => void;
        pagerView: (import("react").Component<import("./specs/PagerViewNativeComponent").NativeProps, {}, any> & Readonly<ReactNative.NativeMethods>) | null;
        setScrollEnabled: (scrollEnabled: boolean) => void;
        render: () => import("react").JSX.Element;
        context: unknown;
        setState: <K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined) => void;
        forceUpdate: (callback?: (() => void) | undefined) => void;
        readonly props: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>;
        state: Readonly<{}>;
        componentDidMount?: (() => void) | undefined;
        shouldComponentUpdate?: ((nextProps: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>, nextState: Readonly<{}>, nextContext: any) => boolean) | undefined;
        componentWillUnmount?: (() => void) | undefined;
        componentDidCatch?: ((error: Error, errorInfo: import("react").ErrorInfo) => void) | undefined;
        getSnapshotBeforeUpdate?: ((prevProps: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>, prevState: Readonly<{}>) => any) | undefined;
        componentDidUpdate?: ((prevProps: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>, prevState: Readonly<{}>, snapshot?: any) => void) | undefined;
        componentWillMount?: (() => void) | undefined;
        UNSAFE_componentWillMount?: (() => void) | undefined;
        componentWillReceiveProps?: ((nextProps: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>, nextContext: any) => void) | undefined;
        UNSAFE_componentWillReceiveProps?: ((nextProps: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>, nextContext: any) => void) | undefined;
        componentWillUpdate?: ((nextProps: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>, nextState: Readonly<{}>, nextContext: any) => void) | undefined;
        UNSAFE_componentWillUpdate?: ((nextProps: Readonly<import("./specs/PagerViewNativeComponent").NativeProps>, nextState: Readonly<{}>, nextContext: any) => void) | undefined;
    }>>;
};
export {};
